// Code generated by MockGen. DO NOT EDIT.
// Source: internal/modules/files/repositories/file.repo.go
//
// Generated by this command:
//
//	mockgen -source=internal/modules/files/repositories/file.repo.go -destination=test/files/mocks/mock_file.repo.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/baothaihcmut/Bibox/storage-app/internal/modules/files/models"
	repositories "github.com/baothaihcmut/Bibox/storage-app/internal/modules/files/repositories"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	gomock "go.uber.org/mock/gomock"
)

// MockFileRepository is a mock of FileRepository interface.
type MockFileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFileRepositoryMockRecorder
	isgomock struct{}
}

// MockFileRepositoryMockRecorder is the mock recorder for MockFileRepository.
type MockFileRepositoryMockRecorder struct {
	mock *MockFileRepository
}

// NewMockFileRepository creates a new mock instance.
func NewMockFileRepository(ctrl *gomock.Controller) *MockFileRepository {
	mock := &MockFileRepository{ctrl: ctrl}
	mock.recorder = &MockFileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileRepository) EXPECT() *MockFileRepositoryMockRecorder {
	return m.recorder
}

// CreateFile mocks base method.
func (m *MockFileRepository) CreateFile(arg0 context.Context, arg1 *models.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFile indicates an expected call of CreateFile.
func (mr *MockFileRepositoryMockRecorder) CreateFile(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockFileRepository)(nil).CreateFile), arg0, arg1)
}

// FindAllFileOfUser mocks base method.
func (m *MockFileRepository) FindAllFileOfUser(ctx context.Context, userId primitive.ObjectID, args repositories.FindFileOfUserArg) ([]*models.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllFileOfUser", ctx, userId, args)
	ret0, _ := ret[0].([]*models.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllFileOfUser indicates an expected call of FindAllFileOfUser.
func (mr *MockFileRepositoryMockRecorder) FindAllFileOfUser(ctx, userId, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllFileOfUser", reflect.TypeOf((*MockFileRepository)(nil).FindAllFileOfUser), ctx, userId, args)
}

// FindFileById mocks base method.
func (m *MockFileRepository) FindFileById(ctx context.Context, id primitive.ObjectID, isDeleted bool) (*models.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFileById", ctx, id, isDeleted)
	ret0, _ := ret[0].(*models.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFileById indicates an expected call of FindFileById.
func (mr *MockFileRepositoryMockRecorder) FindFileById(ctx, id, isDeleted any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFileById", reflect.TypeOf((*MockFileRepository)(nil).FindFileById), ctx, id, isDeleted)
}

// UploadedFile mocks base method.
func (m *MockFileRepository) UploadedFile(arg0 context.Context, arg1 *models.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadedFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadedFile indicates an expected call of UploadedFile.
func (mr *MockFileRepositoryMockRecorder) UploadedFile(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadedFile", reflect.TypeOf((*MockFileRepository)(nil).UploadedFile), arg0, arg1)
}
