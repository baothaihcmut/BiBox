// Code generated by MockGen. DO NOT EDIT.
// Source: internal/modules/file_permission/services/file_permission.service.go
//
// Generated by this command:
//
//	mockgen -source=internal/modules/file_permission/services/file_permission.service.go -destination=test/mocks/mock_file_permission.service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	enums "github.com/baothaihcmut/Bibox/storage-app/internal/common/enums"
	services "github.com/baothaihcmut/Bibox/storage-app/internal/modules/file_permission/services"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	gomock "go.uber.org/mock/gomock"
)

// MockPermissionService is a mock of PermissionService interface.
type MockPermissionService struct {
	ctrl     *gomock.Controller
	recorder *MockPermissionServiceMockRecorder
	isgomock struct{}
}

// MockPermissionServiceMockRecorder is the mock recorder for MockPermissionService.
type MockPermissionServiceMockRecorder struct {
	mock *MockPermissionService
}

// NewMockPermissionService creates a new mock instance.
func NewMockPermissionService(ctrl *gomock.Controller) *MockPermissionService {
	mock := &MockPermissionService{ctrl: ctrl}
	mock.recorder = &MockPermissionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPermissionService) EXPECT() *MockPermissionServiceMockRecorder {
	return m.recorder
}

// CheckPermission mocks base method.
func (m *MockPermissionService) CheckPermission(ctx context.Context, fileID, userId primitive.ObjectID, permssion enums.FilePermissionType) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPermission", ctx, fileID, userId, permssion)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPermission indicates an expected call of CheckPermission.
func (mr *MockPermissionServiceMockRecorder) CheckPermission(ctx, fileID, userId, permssion any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPermission", reflect.TypeOf((*MockPermissionService)(nil).CheckPermission), ctx, fileID, userId, permssion)
}

// CreatePermssion mocks base method.
func (m *MockPermissionService) CreatePermssion(ctx context.Context, args services.CreatePermssionArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePermssion", ctx, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePermssion indicates an expected call of CreatePermssion.
func (mr *MockPermissionServiceMockRecorder) CreatePermssion(ctx, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermssion", reflect.TypeOf((*MockPermissionService)(nil).CreatePermssion), ctx, args)
}
