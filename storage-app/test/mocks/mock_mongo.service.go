// Code generated by MockGen. DO NOT EDIT.
// Source: internal/common/mongo/mongo.service.go
//
// Generated by this command:
//
//	mockgen -source=internal/common/mongo/mongo.service.go -destination=test/mocks/mock_mongo.service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	mongo "go.mongodb.org/mongo-driver/mongo"
	gomock "go.uber.org/mock/gomock"
)

// MockMongoService is a mock of MongoService interface.
type MockMongoService struct {
	ctrl     *gomock.Controller
	recorder *MockMongoServiceMockRecorder
	isgomock struct{}
}

// MockMongoServiceMockRecorder is the mock recorder for MockMongoService.
type MockMongoServiceMockRecorder struct {
	mock *MockMongoService
}

// NewMockMongoService creates a new mock instance.
func NewMockMongoService(ctrl *gomock.Controller) *MockMongoService {
	mock := &MockMongoService{ctrl: ctrl}
	mock.recorder = &MockMongoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoService) EXPECT() *MockMongoServiceMockRecorder {
	return m.recorder
}

// BeginTransaction mocks base method.
func (m *MockMongoService) BeginTransaction(arg0 context.Context) (mongo.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTransaction", arg0)
	ret0, _ := ret[0].(mongo.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockMongoServiceMockRecorder) BeginTransaction(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockMongoService)(nil).BeginTransaction), arg0)
}

// CommitTransaction mocks base method.
func (m *MockMongoService) CommitTransaction(arg0 context.Context, arg1 mongo.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitTransaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitTransaction indicates an expected call of CommitTransaction.
func (mr *MockMongoServiceMockRecorder) CommitTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTransaction", reflect.TypeOf((*MockMongoService)(nil).CommitTransaction), arg0, arg1)
}

// EndTransansaction mocks base method.
func (m *MockMongoService) EndTransansaction(arg0 context.Context, arg1 mongo.Session) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EndTransansaction", arg0, arg1)
}

// EndTransansaction indicates an expected call of EndTransansaction.
func (mr *MockMongoServiceMockRecorder) EndTransansaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndTransansaction", reflect.TypeOf((*MockMongoService)(nil).EndTransansaction), arg0, arg1)
}

// RollbackTransaction mocks base method.
func (m *MockMongoService) RollbackTransaction(arg0 context.Context, arg1 mongo.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackTransaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackTransaction indicates an expected call of RollbackTransaction.
func (mr *MockMongoServiceMockRecorder) RollbackTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTransaction", reflect.TypeOf((*MockMongoService)(nil).RollbackTransaction), arg0, arg1)
}
