// Code generated by MockGen. DO NOT EDIT.
// Source: internal/modules/file_permission/repositories/file_permission.repo.go
//
// Generated by this command:
//
//	mockgen -source=internal/modules/file_permission/repositories/file_permission.repo.go -destination=test/mocks/mock_file_permission.repo.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	enums "github.com/baothaihcmut/Bibox/storage-app/internal/common/enums"
	models "github.com/baothaihcmut/Bibox/storage-app/internal/modules/file_permission/models"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	gomock "go.uber.org/mock/gomock"
)

// MockFilePermissionRepository is a mock of FilePermissionRepository interface.
type MockFilePermissionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFilePermissionRepositoryMockRecorder
	isgomock struct{}
}

// MockFilePermissionRepositoryMockRecorder is the mock recorder for MockFilePermissionRepository.
type MockFilePermissionRepositoryMockRecorder struct {
	mock *MockFilePermissionRepository
}

// NewMockFilePermissionRepository creates a new mock instance.
func NewMockFilePermissionRepository(ctrl *gomock.Controller) *MockFilePermissionRepository {
	mock := &MockFilePermissionRepository{ctrl: ctrl}
	mock.recorder = &MockFilePermissionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilePermissionRepository) EXPECT() *MockFilePermissionRepositoryMockRecorder {
	return m.recorder
}

// BulkCreatePermission mocks base method.
func (m *MockFilePermissionRepository) BulkCreatePermission(ctx context.Context, filePermissions []*models.FilePermission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkCreatePermission", ctx, filePermissions)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkCreatePermission indicates an expected call of BulkCreatePermission.
func (mr *MockFilePermissionRepositoryMockRecorder) BulkCreatePermission(ctx, filePermissions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkCreatePermission", reflect.TypeOf((*MockFilePermissionRepository)(nil).BulkCreatePermission), ctx, filePermissions)
}

// CreateFilePermission mocks base method.
func (m *MockFilePermissionRepository) CreateFilePermission(ctx context.Context, filePermission *models.FilePermission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFilePermission", ctx, filePermission)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFilePermission indicates an expected call of CreateFilePermission.
func (mr *MockFilePermissionRepositoryMockRecorder) CreateFilePermission(ctx, filePermission any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFilePermission", reflect.TypeOf((*MockFilePermissionRepository)(nil).CreateFilePermission), ctx, filePermission)
}

// GetFileByID mocks base method.
func (m *MockFilePermissionRepository) GetFileByID(ctx context.Context, fileID primitive.ObjectID) (*models.FilePermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileByID", ctx, fileID)
	ret0, _ := ret[0].(*models.FilePermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileByID indicates an expected call of GetFileByID.
func (mr *MockFilePermissionRepositoryMockRecorder) GetFileByID(ctx, fileID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileByID", reflect.TypeOf((*MockFilePermissionRepository)(nil).GetFileByID), ctx, fileID)
}

// GetFilePermission mocks base method.
func (m *MockFilePermissionRepository) GetFilePermission(ctx context.Context, fileID, userID primitive.ObjectID) (*models.FilePermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilePermission", ctx, fileID, userID)
	ret0, _ := ret[0].(*models.FilePermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilePermission indicates an expected call of GetFilePermission.
func (mr *MockFilePermissionRepositoryMockRecorder) GetFilePermission(ctx, fileID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilePermission", reflect.TypeOf((*MockFilePermissionRepository)(nil).GetFilePermission), ctx, fileID, userID)
}

// GetPermissionOfFile mocks base method.
func (m *MockFilePermissionRepository) GetPermissionOfFile(ctx context.Context, fileID primitive.ObjectID) ([]*models.FilePermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionOfFile", ctx, fileID)
	ret0, _ := ret[0].([]*models.FilePermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionOfFile indicates an expected call of GetPermissionOfFile.
func (mr *MockFilePermissionRepositoryMockRecorder) GetPermissionOfFile(ctx, fileID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionOfFile", reflect.TypeOf((*MockFilePermissionRepository)(nil).GetPermissionOfFile), ctx, fileID)
}

// GetPermissionOfFileWithUserInfo mocks base method.
func (m *MockFilePermissionRepository) GetPermissionOfFileWithUserInfo(ctx context.Context, fileId primitive.ObjectID) ([]*models.FilePermissionWithUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionOfFileWithUserInfo", ctx, fileId)
	ret0, _ := ret[0].([]*models.FilePermissionWithUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionOfFileWithUserInfo indicates an expected call of GetPermissionOfFileWithUserInfo.
func (mr *MockFilePermissionRepositoryMockRecorder) GetPermissionOfFileWithUserInfo(ctx, fileId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionOfFileWithUserInfo", reflect.TypeOf((*MockFilePermissionRepository)(nil).GetPermissionOfFileWithUserInfo), ctx, fileId)
}

// UpdatePermission mocks base method.
func (m *MockFilePermissionRepository) UpdatePermission(arg0 context.Context, arg1, arg2 primitive.ObjectID, arg3 enums.FilePermissionType, arg4, arg5 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePermission", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePermission indicates an expected call of UpdatePermission.
func (mr *MockFilePermissionRepositoryMockRecorder) UpdatePermission(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePermission", reflect.TypeOf((*MockFilePermissionRepository)(nil).UpdatePermission), arg0, arg1, arg2, arg3, arg4, arg5)
}
