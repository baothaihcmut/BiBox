basePath: /api/v1
definitions:
  enums.FilePermissionType:
    enum:
    - 1
    - 2
    - 3
    type: integer
    x-enum-varnames:
    - ViewPermission
    - CommentPermission
    - EditPermission
  enums.MimeType:
    enum:
    - image/jpeg
    - image/png
    - image/gif
    - image/bmp
    - image/webp
    - image/tiff
    - image/svg+xml
    - application/pdf
    - application/msword
    - application/vnd.openxmlformats-officedocument.wordprocessingml.document
    - application/vnd.ms-excel
    - application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
    - application/vnd.ms-powerpoint
    - application/vnd.openxmlformats-officedocument.presentationml.presentation
    - text/plain
    - text/csv
    - application/json
    - application/xml
    - application/x-yaml
    - audio/mpeg
    - audio/wav
    - audio/ogg
    - audio/flac
    - audio/aac
    - video/mp4
    - video/webm
    - video/x-msvideo
    - video/quicktime
    - video/x-matroska
    - application/zip
    - application/vnd.rar
    - application/x-7z-compressed
    - application/x-tar
    - application/gzip
    - text/html
    - text/css
    - application/javascript
    - text/x-go
    - text/x-python
    - application/x-sh
    - application/x-msdownload
    - application/octet-stream
    type: string
    x-enum-varnames:
    - MimeJPG
    - MimePNG
    - MimeGIF
    - MimeBMP
    - MimeWEBP
    - MimeTIFF
    - MimeSVG
    - MimePDF
    - MimeDOC
    - MimeDOCX
    - MimeXLS
    - MimeXLSX
    - MimePPT
    - MimePPTX
    - MimeTXT
    - MimeCSV
    - MimeJSON
    - MimeXML
    - MimeYAML
    - MimeMP3
    - MimeWAV
    - MimeOGG
    - MimeFLAC
    - MimeAAC
    - MimeMP4
    - MimeWebM
    - MimeAVI
    - MimeMOV
    - MimeMKV
    - MimeZIP
    - MimeRAR
    - Mime7z
    - MimeTAR
    - MimeGZIP
    - MimeHTML
    - MimeCSS
    - MimeJS
    - MimeGo
    - MimePython
    - MimeShell
    - MimeEXE
    - MimeBIN
  presenter.ConfirmSignUpInput:
    properties:
      code:
        type: string
    type: object
  presenter.ConfirmSignUpOutput:
    type: object
  presenter.ExchangeTokenInput:
    properties:
      auth_code:
        type: string
      provider:
        maximum: 2
        minimum: 1
        type: integer
    type: object
  presenter.LogInInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  presenter.SignUpInput:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      repeat_password:
        type: string
    required:
    - first_name
    - last_name
    - password
    - repeat_password
    type: object
  presenter.SignUpOutput:
    type: object
  presenters.AddFilePermissionInput:
    properties:
      permissions:
        items:
          $ref: '#/definitions/presenters.UserPermission'
        minItems: 1
        type: array
    required:
    - permissions
    type: object
  presenters.AddFilePermissionOutput:
    properties:
      permissions:
        items:
          $ref: '#/definitions/response.FilePermissionOuput'
        type: array
    type: object
  presenters.CreateFileInput:
    properties:
      description:
        type: string
      is_folder:
        type: boolean
      name:
        type: string
      parent_folder_id:
        type: string
      storage_detail:
        properties:
          mime_type:
            type: string
          size:
            type: integer
        type: object
      tags:
        items:
          type: string
        type: array
    required:
    - name
    - tags
    type: object
  presenters.CreateFileOutput:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: string
      is_deleted:
        type: boolean
      is_folder:
        type: boolean
      name:
        type: string
      opened_at:
        type: string
      owner_id:
        type: string
      parent_folder_id:
        type: string
      put_object_url:
        type: string
      storage_detail:
        $ref: '#/definitions/response.StorageDetailOuput'
      tags:
        items:
          type: string
        type: array
      total_size:
        type: integer
      updated_at:
        type: string
      url_expiry:
        type: integer
    type: object
  presenters.FilePermissionUserInfo:
    properties:
      email:
        type: string
      first_name:
        type: string
      image:
        type: string
      last_name:
        type: string
    type: object
  presenters.FilePermssionWithUserOutput:
    properties:
      can_share:
        type: boolean
      expire_at:
        type: string
      file_id:
        type: string
      permission_type:
        $ref: '#/definitions/enums.FilePermissionType'
      user:
        $ref: '#/definitions/presenters.FilePermissionUserInfo'
      user_id:
        type: string
    type: object
  presenters.FileWithPathOutput:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: string
      is_deleted:
        type: boolean
      is_folder:
        type: boolean
      name:
        type: string
      opened_at:
        type: string
      owner_id:
        type: string
      parent_folder_id:
        type: string
      path:
        type: string
      put_object_url:
        type: string
      storage_detail:
        $ref: '#/definitions/response.StorageDetailOuput'
      tags:
        items:
          type: string
        type: array
      total_size:
        type: integer
      updated_at:
        type: string
      url_expiry:
        type: integer
    type: object
  presenters.GetAllFileOfTagOutput:
    properties:
      data:
        items:
          $ref: '#/definitions/response.FileWithPermissionOutput'
        type: array
      pagination:
        $ref: '#/definitions/response.PaginationResponse'
    type: object
  presenters.GetAllFileOfUserOuput:
    properties:
      data:
        items:
          $ref: '#/definitions/response.FileWithPermissionOutput'
        type: array
      pagination:
        $ref: '#/definitions/response.PaginationResponse'
    type: object
  presenters.GetFileDownloadUrlOutput:
    properties:
      content_type:
        $ref: '#/definitions/enums.MimeType'
      expiry:
        type: integer
      file_name:
        type: string
      method:
        type: string
      url:
        type: string
    type: object
  presenters.GetFileMetaDataOuput:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: string
      is_deleted:
        type: boolean
      is_folder:
        type: boolean
      name:
        type: string
      opened_at:
        type: string
      owner_id:
        type: string
      parent_folder_id:
        type: string
      storage_detail:
        $ref: '#/definitions/response.StorageDetailOuput'
      tags:
        items:
          type: string
        type: array
      total_size:
        type: integer
      updated_at:
        type: string
    type: object
  presenters.GetFilePermissionOuput:
    properties:
      permissions:
        items:
          $ref: '#/definitions/presenters.FilePermssionWithUserOutput'
        type: array
    type: object
  presenters.GetFileTagsOutput:
    properties:
      tags:
        items:
          $ref: '#/definitions/response.TagOutput'
        type: array
    type: object
  presenters.GetSubFileOfFolderInput:
    properties:
      id:
        type: string
      is_asc:
        type: boolean
      is_folder:
        type: boolean
      limit:
        type: integer
      mime_type:
        type: string
      offset:
        minimum: 0
        type: integer
      sort_by:
        type: string
    required:
    - sort_by
    type: object
  presenters.SearchTagsOutput:
    properties:
      pagination:
        $ref: '#/definitions/response.PaginationResponse'
      tags:
        items:
          $ref: '#/definitions/response.TagOutput'
        type: array
    type: object
  presenters.SearchUserOuput:
    properties:
      data:
        items:
          $ref: '#/definitions/response.UserOutput'
        type: array
      pagination:
        $ref: '#/definitions/response.PaginationResponse'
    type: object
  presenters.UpdateFilePermissionInput:
    properties:
      expire_at:
        type: string
      fileId:
        type: string
      permission_type:
        allOf:
        - $ref: '#/definitions/enums.FilePermissionType'
        maximum: 3
        minimum: 1
      userId:
        type: string
    required:
    - fileId
    - permission_type
    - userId
    type: object
  presenters.UpdateFilePermissionOuput:
    properties:
      permissions:
        items:
          $ref: '#/definitions/response.FilePermissionOuput'
        type: array
    type: object
  presenters.UploadFolderInput:
    properties:
      data:
        $ref: '#/definitions/presenters.CreateFileInput'
      sub_files:
        items:
          $ref: '#/definitions/presenters.UploadFolderInput'
        type: array
    type: object
  presenters.UploadFolderOutput:
    properties:
      files:
        items:
          $ref: '#/definitions/presenters.FileWithPathOutput'
        type: array
    type: object
  presenters.UploadedFileOutput:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: string
      is_deleted:
        type: boolean
      is_folder:
        type: boolean
      name:
        type: string
      opened_at:
        type: string
      owner_id:
        type: string
      parent_folder_id:
        type: string
      storage_detail:
        $ref: '#/definitions/response.StorageDetailOuput'
      tags:
        items:
          type: string
        type: array
      total_size:
        type: integer
      updated_at:
        type: string
    type: object
  presenters.UserPermission:
    properties:
      expire_at:
        type: string
      permission_type:
        allOf:
        - $ref: '#/definitions/enums.FilePermissionType'
        maximum: 3
        minimum: 1
      user_id:
        type: string
    required:
    - permission_type
    - user_id
    type: object
  response.AppResponse:
    properties:
      message:
        type: string
      sucess:
        type: boolean
    type: object
  response.FilePermissionOuput:
    properties:
      can_share:
        type: boolean
      expire_at:
        type: string
      file_id:
        type: string
      permission_type:
        $ref: '#/definitions/enums.FilePermissionType'
      user_id:
        type: string
    type: object
  response.FileWithPermissionOutput:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: string
      is_deleted:
        type: boolean
      is_folder:
        type: boolean
      name:
        type: string
      opened_at:
        type: string
      owner_id:
        type: string
      parent_folder_id:
        type: string
      permission_type:
        $ref: '#/definitions/enums.FilePermissionType'
      permissions:
        items:
          $ref: '#/definitions/response.PermissionOfFileOuput'
        type: array
      storage_detail:
        $ref: '#/definitions/response.StorageDetailOuput'
      tags:
        items:
          type: string
        type: array
      total_size:
        type: integer
      updated_at:
        type: string
    type: object
  response.PaginationResponse:
    properties:
      has_next:
        type: boolean
      has_prev:
        type: boolean
      limit:
        type: integer
      next_offset:
        type: integer
      offset:
        type: integer
      prev_offset:
        type: integer
      total:
        type: integer
    type: object
  response.PermissionOfFileOuput:
    properties:
      permission_type:
        $ref: '#/definitions/enums.FilePermissionType'
      user_id:
        type: string
      user_image:
        type: string
    type: object
  response.StorageDetailOuput:
    properties:
      file_size:
        type: integer
      mime_type:
        $ref: '#/definitions/enums.MimeType'
    type: object
  response.TagOutput:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  response.UserOutput:
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      image:
        type: string
      last_name:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a sample API for file storage
  title: Storage App API
  version: "1.0"
paths:
  /auth/confirm:
    post:
      consumes:
      - application/json
      description: Confirm sign up
      parameters:
      - description: code for confirm
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/presenter.ConfirmSignUpInput'
      produces:
      - application/json
      responses:
        "201":
          description: Confirm sign up success
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  $ref: '#/definitions/presenter.ConfirmSignUpOutput'
              type: object
        "401":
          description: Invalid confirm code
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  type: object
              type: object
      tags:
      - auth
  /auth/exchange:
    post:
      consumes:
      - application/json
      description: Exchange Google auth code
      parameters:
      - description: auth code from google oauth2 resposne
        in: body
        name: authCode
        required: true
        schema:
          $ref: '#/definitions/presenter.ExchangeTokenInput'
      produces:
      - application/json
      responses:
        "201":
          description: Login success
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  type: object
              type: object
        "401":
          description: Wrong auth code
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  type: object
              type: object
      tags:
      - auth
  /auth/log-in:
    post:
      consumes:
      - application/json
      description: Log in
      parameters:
      - description: information for log in
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/presenter.LogInInput'
      produces:
      - application/json
      responses:
        "201":
          description: Login success
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  type: object
              type: object
        "401":
          description: Wrong password or email
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  type: object
              type: object
      tags:
      - auth
  /auth/sign-up:
    post:
      consumes:
      - application/json
      description: Sign up
      parameters:
      - description: information for sign up
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/presenter.SignUpInput'
      produces:
      - application/json
      responses:
        "201":
          description: Sign up success
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  $ref: '#/definitions/presenter.SignUpOutput'
              type: object
        "409":
          description: Email exist, email is pending for cofirm
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  type: object
              type: object
      tags:
      - auth
  /files/:id/download-url:
    get:
      consumes:
      - application/json
      description: Get download url of file
      parameters:
      - description: file id
        in: path
        name: id
        required: true
        type: string
      - description: preview mode
        in: query
        name: preview
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Find tags of file sucess
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  $ref: '#/definitions/presenters.GetFileDownloadUrlOutput'
              type: object
        "400":
          description: miss id
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  type: object
              type: object
        "403":
          description: permission denied
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  type: object
              type: object
        "404":
          description: file not found
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  type: object
              type: object
        "409":
          description: file is folder
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  type: object
              type: object
      tags:
      - files
  /files/:id/metadata:
    get:
      consumes:
      - application/json
      description: Get metadata of file
      parameters:
      - description: file id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Find tags of file sucess
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  $ref: '#/definitions/presenters.GetFileMetaDataOuput'
              type: object
        "400":
          description: miss id
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  type: object
              type: object
        "403":
          description: permission denied
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  type: object
              type: object
        "404":
          description: file not found
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  type: object
              type: object
      tags:
      - files
  /files/:id/my-permission:
    get:
      consumes:
      - application/json
      description: Get file permission of user
      parameters:
      - description: file id
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Find file of user sucess
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  $ref: '#/definitions/presenters.GetSubFileOfFolderInput'
              type: object
        "403":
          description: User don't have permission for this file operation
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  type: object
              type: object
        "404":
          description: Parent folder not found, Tag of file not found
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  type: object
              type: object
      tags:
      - files
  /files/:id/permissions:
    get:
      consumes:
      - application/json
      description: Get permission of file
      parameters:
      - description: file id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Find tags of file sucess
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  $ref: '#/definitions/presenters.GetFilePermissionOuput'
              type: object
        "400":
          description: miss id
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  type: object
              type: object
        "403":
          description: permission denied
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  type: object
              type: object
        "404":
          description: file not found
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  type: object
              type: object
      tags:
      - files
  /files/:id/permissions/:userId/delete:
    delete:
      consumes:
      - application/json
      description: Delete permission
      parameters:
      - description: file id
        in: path
        name: id
        type: string
      - description: user id
        in: path
        name: userId
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Delete permission success
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Unallow sort field, lack of query
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  type: object
              type: object
      tags:
      - files
  /files/:id/permissions/:userId/update:
    patch:
      consumes:
      - application/json
      description: Update permission
      parameters:
      - description: file id
        in: path
        name: id
        type: string
      - description: user id
        in: path
        name: userId
        type: string
      - description: permission info
        in: body
        name: file
        required: true
        schema:
          $ref: '#/definitions/presenters.UpdateFilePermissionInput'
      produces:
      - application/json
      responses:
        "201":
          description: Update permission success
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  $ref: '#/definitions/presenters.UpdateFilePermissionOuput'
              type: object
        "400":
          description: Unallow sort field, lack of query
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  type: object
              type: object
      tags:
      - files
  /files/:id/permissions/add:
    post:
      consumes:
      - application/json
      description: Add permission for file
      parameters:
      - description: file id must be UUID
        in: path
        name: id
        required: true
        type: string
      - description: permission info
        in: body
        name: file
        required: true
        schema:
          $ref: '#/definitions/presenters.AddFilePermissionInput'
      produces:
      - application/json
      responses:
        "201":
          description: Add permission success
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  $ref: '#/definitions/presenters.AddFilePermissionOutput'
              type: object
        "403":
          description: User don't have permission for this file operation
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  type: object
              type: object
        "404":
          description: Parent folder not found, Tag of file not found
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  type: object
              type: object
      tags:
      - files
  /files/:id/sub-file:
    get:
      consumes:
      - application/json
      description: Find file of user
      parameters:
      - description: file is folder or not, if null fetch all file and folder
        in: query
        name: is_folder
        type: boolean
      - description: 'sort field, allow short field: created_at, updated_at, opened_at'
        in: query
        name: sort_by
        required: true
        type: string
      - description: sort direction
        in: query
        name: is_asc
        required: true
        type: boolean
      - description: for pagination
        in: query
        name: offset
        required: true
        type: integer
      - description: for pagination
        in: query
        name: limit
        required: true
        type: integer
      - description: mime type of file, if is_folder is true not pass mime_type
        in: query
        name: mime_type
        type: string
      - description: file id
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Find file of user sucess
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  $ref: '#/definitions/presenters.GetSubFileOfFolderInput'
              type: object
        "400":
          description: Unallow sort field, lack of query
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  type: object
              type: object
      tags:
      - files
  /files/:id/tags:
    get:
      consumes:
      - application/json
      description: Get tag of file
      parameters:
      - description: file id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Find tags of file sucess
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  $ref: '#/definitions/presenters.GetFileTagsOutput'
              type: object
        "400":
          description: miss id
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  type: object
              type: object
        "403":
          description: permission denied
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  type: object
              type: object
        "404":
          description: file not found
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  type: object
              type: object
      tags:
      - files
  /files/:id/uploaded:
    patch:
      consumes:
      - application/json
      description: Uploaded file
      parameters:
      - description: file id
        in: path
        name: id
        required: true
        type: string
      - description: file id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Uploaded file sucess
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  $ref: '#/definitions/presenters.UploadedFileOutput'
              type: object
        "403":
          description: file is folder
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  type: object
              type: object
        "404":
          description: file not found
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  type: object
              type: object
      tags:
      - files
  /files/add:
    post:
      consumes:
      - application/json
      description: |-
        Create new file 111
        Create new file 111
      parameters:
      - description: file information
        in: body
        name: file
        required: true
        schema:
          $ref: '#/definitions/presenters.CreateFileInput'
      produces:
      - application/json
      responses:
        "201":
          description: Create file sucess, storage_detail.put_object_url is presign
            url for upload file
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  $ref: '#/definitions/presenters.CreateFileOutput'
              type: object
        "403":
          description: User don't have permission for this file operation
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  type: object
              type: object
        "404":
          description: Parent folder not found, Tag of file not found
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  type: object
              type: object
      tags:
      - files
  /files/my-drive:
    get:
      consumes:
      - application/json
      description: Find file of user
      parameters:
      - description: if true file in bin, false is file in drive
        in: query
        name: is_deleted
        type: boolean
      - description: file is folder or not, if null fetch all file and folder
        in: query
        name: is_folder
        type: boolean
      - description: 'sort field, allow short field: created_at, updated_at, opened_at'
        in: query
        name: sort_by
        required: true
        type: string
      - description: sort direction
        in: query
        name: is_asc
        required: true
        type: boolean
      - description: for pagination
        in: query
        name: offset
        required: true
        type: integer
      - description: for pagination
        in: query
        name: limit
        required: true
        type: integer
      - description: mime type of file, if is_folder is true not pass mime_type
        in: query
        name: mime_type
        type: string
      - description: mime type of file, if is_folder is true not pass mime_type
        in: query
        name: mime_type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Find file of user sucess
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  $ref: '#/definitions/presenters.GetAllFileOfUserOuput'
              type: object
        "400":
          description: Un allow sort field, lack of query
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  type: object
              type: object
      tags:
      - files
  /files/upload-folder:
    post:
      consumes:
      - application/json
      description: upload folder
      parameters:
      - description: folder information
        in: body
        name: file
        required: true
        schema:
          $ref: '#/definitions/presenters.UploadFolderInput'
      produces:
      - application/json
      responses:
        "201":
          description: Create file sucess, storage_detail.put_object_url is presign
            url for upload file
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  $ref: '#/definitions/presenters.UploadFolderOutput'
              type: object
        "403":
          description: User don't have permission for this file operation
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  type: object
              type: object
        "404":
          description: Parent folder not found, Tag of file not found
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  type: object
              type: object
      tags:
      - files
  /tags/:id/files:
    get:
      consumes:
      - application/json
      description: |-
        Find all tags
        Find all tags
      parameters:
      - description: limit
        in: query
        name: limit
        required: true
        type: integer
      - description: offset
        in: query
        name: offset
        required: true
        type: integer
      - description: query for search
        in: query
        name: query
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Create file sucess, storage_detail.put_object_url is presign
            url for upload file
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  $ref: '#/definitions/presenters.SearchTagsOutput'
              type: object
      tags:
      - tags
  /tags/search:
    get:
      consumes:
      - application/json
      description: |-
        Find all file of tags
        Find all file of tags
      parameters:
      - description: id of tag must be object id
        in: path
        name: id
        required: true
        type: string
      - description: limit
        in: query
        name: limit
        required: true
        type: integer
      - description: offset
        in: query
        name: offset
        required: true
        type: integer
      - description: sort
        in: query
        name: sort_by
        required: true
        type: string
      - description: direction sort
        in: query
        name: is_asc
        required: true
        type: boolean
      produces:
      - application/json
      responses:
        "201":
          description: Create file sucess, storage_detail.put_object_url is presign
            url for upload file
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  $ref: '#/definitions/presenters.GetAllFileOfTagOutput'
              type: object
        "403":
          description: User don't have permission for this file operation
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  type: object
              type: object
        "404":
          description: Tag of file not found
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  type: object
              type: object
      tags:
      - tags
  /users/search:
    get:
      consumes:
      - application/json
      description: search user by email
      parameters:
      - description: email value can be any string
        in: query
        name: email
        required: true
        type: string
      - description: off set must be greater than 0
        in: query
        name: offset
        type: string
      - description: limit must be greater than 0
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: search user success
          schema:
            allOf:
            - $ref: '#/definitions/response.AppResponse'
            - properties:
                data:
                  $ref: '#/definitions/presenters.SearchUserOuput'
              type: object
      tags:
      - users
swagger: "2.0"
