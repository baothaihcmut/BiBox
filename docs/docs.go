// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/exchange": {
            "post": {
                "description": "Exchange Google auth code",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "parameters": [
                    {
                        "description": "auth code from google oauth2 resposne",
                        "name": "authCode",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/presenter.ExchangeTokenInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Login success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.AppResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Wrong auth code",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.AppResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/files": {
            "post": {
                "description": "Create new file",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "files"
                ],
                "parameters": [
                    {
                        "description": "file information",
                        "name": "file",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/presenters.CreateFileInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create file sucess, storage_detail.put_object_url is presign url for upload file",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.AppResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/presenters.CreateFileOutput"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "403": {
                        "description": "User don't have permission for this file operation",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.AppResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Parent folder not found, Tag of file not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.AppResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "presenter.ExchangeTokenInput": {
            "type": "object",
            "properties": {
                "auth_code": {
                    "type": "string"
                }
            }
        },
        "presenters.CreateFileInput": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "has_password": {
                    "type": "boolean"
                },
                "is_folder": {
                    "type": "boolean"
                },
                "is_secure": {
                    "type": "boolean"
                },
                "parent_folder_id": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "storage_detail": {
                    "type": "object",
                    "properties": {
                        "file_type": {
                            "type": "string"
                        },
                        "size": {
                            "type": "integer"
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "presenters.CreateFileOutput": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "has_password": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "is_deleted": {
                    "type": "boolean"
                },
                "is_folder": {
                    "type": "boolean"
                },
                "is_secure": {
                    "type": "boolean"
                },
                "opened_at": {
                    "type": "string"
                },
                "owner_id": {
                    "type": "string"
                },
                "parent_folder_id": {
                    "type": "string"
                },
                "storage_detail": {
                    "$ref": "#/definitions/presenters.StorageDetailOuput"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "total_size": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "presenters.StorageDetailOuput": {
            "type": "object",
            "properties": {
                "file_size": {
                    "type": "integer"
                },
                "file_type": {
                    "type": "string"
                },
                "put_object_url": {
                    "type": "string"
                },
                "url_expiry": {
                    "type": "integer"
                }
            }
        },
        "response.AppResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "sucess": {
                    "type": "boolean"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Storage App API",
	Description:      "This is a sample API for file storage",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
