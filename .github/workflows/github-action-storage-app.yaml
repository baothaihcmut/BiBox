name: Storage app service CI/CD

on:
  push:
    paths:
      - "storage-app/**"
      - ".github/workflows/**"
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.2

      - name: Install golangci-lint
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

      - name: Run Linter
        run: |
          cd storage-app
          golangci-lint run ./...

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.2

      - name: Build bin
        run: |
          cd storage-app
          export CGO_ENABLED=0 GOOS=linux GOARCH=amd64
          go build -o bin/storage-app cmd/storage-app/main.go

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: storage-app
          path: storage-app/bin/storage-app

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.2

      - name: Run tests
        run: |
          cd storage-app/test
          go test ./... -v -coverprofile=coverage.out

  build-image:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: storage-app
          path: storage-app/bin/

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./storage-app
          file: ./storage-app/Dockerfile
          push: true
          tags: |
            baothaihcmut/storage-app:latest
  
  deploy:
    needs: build-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts
      - name: multiple host
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
              # Export GitHub secrets as environment variables
              export MONGO_URI="${{ secrets.MONGO_URI }}"
              export JWT_ACCESS_TOKEN_SECRET="${{ secrets.JWT_ACCESS_TOKEN_SECRET }}"
              export JWT_REFRESH_TOKEN_SECRET="${{ secrets.JWT_REFRESH_TOKEN_SECRET }}"
              export GOOGLE_OAUTH2_CLIENT_ID="${{ secrets.GOOGLE_OAUTH2_CLIENT_ID }}"
              export GOOGLE_OAUTH2_SECRET="${{ secrets.GOOGLE_OAUTH2_SECRET }}"
              export OAUTH2_CLIENT_ID="${{ secrets.OAUTH2_CLIENT_ID }}"
              export OAUTH2_SECRET="${{ secrets.OAUTH2_SECRET }}"
              export S3_ACCESS_KEY="${{ secrets.S3_ACCESS_KEY }}"
              export S3_SECRET_KEY="${{ secrets.S3_SECRET_KEY }}"
              export GOOGLE_OAUTH2_REDIRECT_URI="$GOOGLE_OAUTH2_REDIRECT_URI"
              export GMAIL_APP_PASSWORD="${{ secrets.GMAIL_APP_PASSWORD }}"
              

              git clone -b storage-app-config git@github.com:baothaihcmut/BiBox.git

              cd BiBox/environments/config
              envsubst < config-storage-app.yml > config-storage-app.env.yml
              envsubst < config-email-service.yml > config-email-service.env.yml

              cd ../docker
              # Restart services
              docker compose -f docker-compose-api.yaml pull
              docker compose -f docker-compose-api.yaml up -d --remove-orphans
              
              # Clean up unused images
              docker system prune -f
 

